Setting up a Spring Boot application that integrates AWS MSK (Managed Streaming for Apache Kafka), AWS Kinesis, and WebSockets involves multiple steps. Here's an outline of the process and a simplified example to get you started:

### Prerequisites
1. **AWS Account**: Ensure you have access to AWS services.
2. **AWS SDK and Permissions**: Make sure you have the necessary permissions to use MSK, Kinesis, and other AWS services.
3. **Spring Boot Application**: Basic setup with necessary dependencies.

### Dependencies
Add the following dependencies to your `pom.xml` for a Spring Boot project:

```xml
<dependencies>
    <!-- Spring Boot dependencies -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-websocket</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.kafka</groupId>
        <artifactId>spring-kafka</artifactId>
    </dependency>
    <dependency>
        <groupId>software.amazon.awssdk</groupId>
        <artifactId>kinesis</artifactId>
    </dependency>
    <dependency>
        <groupId>software.amazon.msk</groupId>
        <artifactId>msk</artifactId>
    </dependency>
</dependencies>
```

### Application Setup

#### 1. Kafka Consumer to read from MSK

```java
package com.example.demo.kafka;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;
import software.amazon.awssdk.services.kinesis.KinesisClient;
import software.amazon.awssdk.services.kinesis.model.PutRecordRequest;

import java.nio.ByteBuffer;

@Service
public class KafkaConsumerService {

    private final KinesisClient kinesisClient;
    private final String streamName = "your-kinesis-stream-name";

    public KafkaConsumerService(KinesisClient kinesisClient) {
        this.kinesisClient = kinesisClient;
    }

    @KafkaListener(topics = "your-kafka-topic", groupId = "your-group-id")
    public void consume(ConsumerRecord<String, String> record) {
        String message = record.value();
        sendToKinesis(message);
    }

    private void sendToKinesis(String message) {
        PutRecordRequest request = PutRecordRequest.builder()
                .streamName(streamName)
                .partitionKey("partitionKey")
                .data(ByteBuffer.wrap(message.getBytes()))
                .build();

        kinesisClient.putRecord(request);
    }
}
```

#### 2. Kinesis Consumer to stream data to WebSocket

```java
package com.example.demo.kinesis;

import org.springframework.stereotype.Service;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import software.amazon.awssdk.services.kinesis.KinesisClient;
import software.amazon.awssdk.services.kinesis.model.GetRecordsRequest;
import software.amazon.awssdk.services.kinesis.model.GetRecordsResponse;
import software.amazon.awssdk.services.kinesis.model.GetShardIteratorRequest;

import java.io.IOException;
import java.util.concurrent.Executors;

@Service
public class KinesisConsumerService {

    private final KinesisClient kinesisClient;
    private final WebSocketSession webSocketSession;
    private final String streamName = "your-kinesis-stream-name";

    public KinesisConsumerService(KinesisClient kinesisClient, WebSocketSession webSocketSession) {
        this.kinesisClient = kinesisClient;
        this.webSocketSession = webSocketSession;
        startConsuming();
    }

    private void startConsuming() {
        Executors.newSingleThreadExecutor().submit(() -> {
            String shardIterator = getShardIterator();
            while (true) {
                GetRecordsRequest getRecordsRequest = GetRecordsRequest.builder()
                        .shardIterator(shardIterator)
                        .build();

                GetRecordsResponse recordsResponse = kinesisClient.getRecords(getRecordsRequest);
                recordsResponse.records().forEach(record -> {
                    try {
                        webSocketSession.sendMessage(new TextMessage(new String(record.data().asByteArray())));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                });

                shardIterator = recordsResponse.nextShardIterator();
                try {
                    Thread.sleep(1000);  // 1 second delay to ensure real-time streaming
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
        });
    }

    private String getShardIterator() {
        GetShardIteratorRequest request = GetShardIteratorRequest.builder()
                .streamName(streamName)
                .shardId("shardId-000000000000")
                .shardIteratorType("LATEST")
                .build();

        return kinesisClient.getShardIterator(request).shardIterator();
    }
}
```

#### 3. WebSocket Configuration

```java
package com.example.demo.websocket;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.socket.config.annotation.EnableWebSocket;
import org.springframework.web.socket.config.annotation.WebSocketConfigurer;
import org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;

@Configuration
@EnableWebSocket
public class WebSocketConfig implements WebSocketConfigurer {

    private final WebSocketHandler webSocketHandler;

    public WebSocketConfig(WebSocketHandler webSocketHandler) {
        this.webSocketHandler = webSocketHandler;
    }

    @Override
    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {
        registry.addHandler(webSocketHandler, "/websocket-endpoint").setAllowedOrigins("*");
    }
}
```

#### 4. WebSocket Handler

```java
package com.example.demo.websocket;

import org.springframework.stereotype.Component;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketHandler;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

@Component
public class WebSocketHandler extends TextWebSocketHandler {

    @Override
    public void afterConnectionEstablished(WebSocketSession session) throws Exception {
        // You can store the session and use it to send data later
        System.out.println("WebSocket connection established");
    }

    @Override
    protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
        // Handle incoming messages from the WebSocket client
        String payload = message.getPayload();
        System.out.println("Received: " + payload);
        session.sendMessage(new TextMessage("Server received: " + payload));
    }
}
```

### AWS Configuration
- Ensure you have the necessary AWS resources set up:
  - **MSK Cluster**: Set up a Kafka cluster on AWS MSK.
  - **Kinesis Stream**: Create a Kinesis Data Stream.
  - **IAM Roles**: Assign necessary permissions to access MSK and Kinesis from your application.

### Running the Application
1. **Kafka Producer**: Send messages to the Kafka topic in MSK.
2. **Spring Boot Application**: Run the Spring Boot application. It will consume messages from MSK, send them to Kinesis, and stream them to WebSocket clients in real-time.
3. **WebSocket Client**: Connect to the WebSocket endpoint (`/websocket-endpoint`) and subscribe to receive messages.

This setup provides a streamlined data flow from MSK to Kinesis and then to WebSocket clients, ensuring real-time data streaming. Fine-tuning may be necessary based on specific requirements and use cases.




Certainly! Below are the step-by-step instructions to set up an AWS Kinesis stream, IAM roles, and configure a Spring Boot application to consume data from MSK, stream it to Kinesis, and then to WebSocket clients.

### Step 1: Set Up a Kinesis Stream

#### 1.1 Login to AWS Management Console
- Go to the [AWS Management Console](https://aws.amazon.com/console/) and log in with your credentials.

#### 1.2 Navigate to Kinesis
- In the AWS Management Console, navigate to "Kinesis" under the "Analytics" category.

#### 1.3 Create a Data Stream
- Click on "Create data stream".
- Enter a name for your stream, e.g., `your-kinesis-stream-name`.
- Specify the number of shards (start with 1 for testing).
- Click "Create stream".

### Step 2: Create IAM Roles

#### 2.1 Navigate to IAM
- In the AWS Management Console, navigate to "IAM" under the "Security, Identity, & Compliance" category.

#### 2.2 Create a New Role for Your Spring Boot Application
1. Click on "Roles" in the left navigation pane.
2. Click "Create role".
3. Select "AWS service" as the type of trusted entity.
4. Select "EC2" if you are running your Spring Boot application on an EC2 instance, or "Lambda" if it's a Lambda function, or "Other" for other use cases.
5. Click "Next: Permissions".

#### 2.3 Attach Policies to the Role
1. Search for and attach the following policies:
    - `AmazonKinesisFullAccess`
    - `AmazonMSKFullAccess`
    - `AmazonEC2FullAccess` (if applicable, for EC2 instances)
2. Click "Next: Tags", then "Next: Review".

#### 2.4 Name the Role
1. Enter a role name, e.g., `SpringBootKinesisRole`.
2. Click "Create role".

### Step 3: Attach the IAM Role to Your Application Environment

#### 3.1 For EC2 Instances:
1. Navigate to the EC2 Dashboard.
2. Select your instance.
3. Click on "Actions", then "Security", and "Modify IAM Role".
4. Select the IAM role you created (`SpringBootKinesisRole`).
5. Click "Update IAM role".

#### 3.2 For Lambda Functions:
1. Navigate to the Lambda Dashboard.
2. Select your function.
3. Click on "Configuration" and then "Permissions".
4. Click "Edit" under "Execution role".
5. Select the IAM role you created (`SpringBootKinesisRole`).
6. Click "Save".

### Step 4: Configure the AWS SDK in Your Spring Boot Application

#### 4.1 Add AWS SDK and Spring Boot Dependencies
Update your `pom.xml` to include the necessary dependencies:

```xml
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-websocket</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.kafka</groupId>
        <artifactId>spring-kafka</artifactId>
    </dependency>
    <dependency>
        <groupId>software.amazon.awssdk</groupId>
        <artifactId>kinesis</artifactId>
    </dependency>
</dependencies>
```

#### 4.2 Configure AWS Credentials
Ensure that your Spring Boot application is configured to use the AWS SDK with the correct credentials. You can use environment variables, a configuration file, or IAM roles attached to your EC2 instance.

```yaml
# application.yml
aws:
  region: your-aws-region
  credentials:
    accessKey: YOUR_ACCESS_KEY_ID
    secretKey: YOUR_SECRET_ACCESS_KEY
```

#### 4.3 Create an AWS Configuration Class
Create a configuration class in your Spring Boot application to set up the AWS SDK:

```java
package com.example.demo.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.kinesis.KinesisClient;

@Configuration
public class AwsConfig {

    @Bean
    public KinesisClient kinesisClient() {
        return KinesisClient.builder()
                .region(Region.of("your-aws-region"))
                .credentialsProvider(StaticCredentialsProvider.create(
                        AwsBasicCredentials.create("YOUR_ACCESS_KEY_ID", "YOUR_SECRET_ACCESS_KEY")))
                .build();
    }
}
```

### Step 5: Implement Kafka Consumer to Read from MSK

#### 5.1 Create Kafka Consumer Service
Implement the Kafka consumer service to read data from MSK and send it to Kinesis:

```java
package com.example.demo.kafka;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;
import software.amazon.awssdk.services.kinesis.KinesisClient;
import software.amazon.awssdk.services.kinesis.model.PutRecordRequest;

import java.nio.ByteBuffer;

@Service
public class KafkaConsumerService {

    private final KinesisClient kinesisClient;
    private final String streamName = "your-kinesis-stream-name";

    public KafkaConsumerService(KinesisClient kinesisClient) {
        this.kinesisClient = kinesisClient;
    }

    @KafkaListener(topics = "your-kafka-topic", groupId = "your-group-id")
    public void consume(ConsumerRecord<String, String> record) {
        String message = record.value();
        sendToKinesis(message);
    }

    private void sendToKinesis(String message) {
        PutRecordRequest request = PutRecordRequest.builder()
                .streamName(streamName)
                .partitionKey("partitionKey")
                .data(ByteBuffer.wrap(message.getBytes()))
                .build();

        kinesisClient.putRecord(request);
    }
}
```

### Step 6: Implement Kinesis Consumer to Stream Data to WebSocket

#### 6.1 Create Kinesis Consumer Service
Implement the Kinesis consumer service to stream data from Kinesis to WebSocket clients:

```java
package com.example.demo.kinesis;

import org.springframework.stereotype.Service;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import software.amazon.awssdk.services.kinesis.KinesisClient;
import software.amazon.awssdk.services.kinesis.model.GetRecordsRequest;
import software.amazon.awssdk.services.kinesis.model.GetRecordsResponse;
import software.amazon.awssdk.services.kinesis.model.GetShardIteratorRequest;

import java.io.IOException;
import java.util.concurrent.Executors;

@Service
public class KinesisConsumerService {

    private final KinesisClient kinesisClient;
    private final WebSocketSession webSocketSession;
    private final String streamName = "your-kinesis-stream-name";

    public KinesisConsumerService(KinesisClient kinesisClient, WebSocketSession webSocketSession) {
        this.kinesisClient = kinesisClient;
        this.webSocketSession = webSocketSession;
        startConsuming();
    }

    private void startConsuming() {
        Executors.newSingleThreadExecutor().submit(() -> {
            String shardIterator = getShardIterator();
            while (true) {
                GetRecordsRequest getRecordsRequest = GetRecordsRequest.builder()
                        .shardIterator(shardIterator)
                        .build();

                GetRecordsResponse recordsResponse = kinesisClient.getRecords(getRecordsRequest);
                recordsResponse.records().forEach(record -> {
                    try {
                        webSocketSession.sendMessage(new TextMessage(new String(record.data().asByteArray())));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                });

                shardIterator = recordsResponse.nextShardIterator();
                try {
                    Thread.sleep(1000);  // 1 second delay to ensure real-time streaming
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
        });
    }

    private String getShardIterator() {
        GetShardIteratorRequest request = GetShardIteratorRequest.builder()
                .streamName(streamName)
                .shardId("shardId-000000000000")
                .shardIteratorType("LATEST")
                .build();

        return kinesisClient.getShardIterator(request).shardIterator();
    }
}
```

### Step 7: Set Up WebSocket Configuration

#### 7.1 Configure WebSocket
Create a WebSocket configuration class to set up the WebSocket endpoint:

```java
package com.example.demo.websocket;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.socket.config.annotation.EnableWebSocket;
import org.springframework.web.socket.config.annotation.WebSocketConfigurer;
import org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;

@Configuration
@EnableWebSocket
public class WebSocketConfig implements WebSocketConfigurer {

    private final WebSocketHandler webSocketHandler;

    public WebSocketConfig(WebSocketHandler webSocketHandler) {
        this.webSocketHandler = webSocketHandler;
    }

    @Override
    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {
        registry.addHandler(webSocketHandler, "/websocket-endpoint").setAllowedOrigins("*");
    }
}
```

Certainly! Let's continue with the implementation of the WebSocket handler and complete the setup.

### Step 7: Set Up WebSocket Configuration (Continued)

#### 7.2 Implement WebSocket Handler
Create a WebSocket handler to manage WebSocket connections and messages:

```java
package com.example.demo.websocket;

import org.springframework.stereotype.Component;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

@Component
public class WebSocketHandler extends TextWebSocketHandler {

    @Override
    public void afterConnectionEstablished(WebSocketSession session) throws Exception {
        // Store the session and use it to send data later
        System.out.println("WebSocket connection established");
    }

    @Override
    protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
        // Handle incoming messages from the WebSocket client
        String payload = message.getPayload();
        System.out.println("Received: " + payload);
        session.sendMessage(new TextMessage("Server received: " + payload));
    }
}
```

### Step 8: Verifying the Setup

#### 8.1 Send Data to MSK
Ensure your Kafka producer is sending data to the Kafka topic in MSK. This can be done using a simple Kafka producer application or a command-line tool.

#### 8.2 Run Your Spring Boot Application
Start your Spring Boot application. It should begin consuming messages from MSK, sending them to Kinesis, and then streaming them via WebSocket.

#### 8.3 WebSocket Client
Use a WebSocket client (such as a web application, Postman, or a simple JavaScript client) to connect to the WebSocket endpoint (`/websocket-endpoint`) and verify that you receive data in real-time.

### Example WebSocket Client (JavaScript)

You can use the following JavaScript code to test the WebSocket connection:

```html
<!DOCTYPE html>
<html>
<head>
    <title>WebSocket Client</title>
</head>
<body>
    <h1>WebSocket Client</h1>
    <button onclick="connect()">Connect</button>
    <button onclick="disconnect()">Disconnect</button>
    <div id="messages"></div>

    <script>
        var ws;

        function connect() {
            ws = new WebSocket('ws://localhost:8080/websocket-endpoint');

            ws.onopen = function() {
                document.getElementById('messages').innerHTML += '<p>Connected</p>';
            };

            ws.onmessage = function(event) {
                document.getElementById('messages').innerHTML += '<p>Message: ' + event.data + '</p>';
            };

            ws.onclose = function() {
                document.getElementById('messages').innerHTML += '<p>Disconnected</p>';
            };
        }

        function disconnect() {
            if (ws) {
                ws.close();
            }
        }
    </script>
</body>
</html>
```

### Final Steps

1. **Deploy and Test**: Deploy your Spring Boot application to an appropriate environment (e.g., an EC2 instance) and test the entire data flow from MSK to Kinesis to WebSocket.
2. **Monitor and Optimize**: Monitor the performance of your application and optimize the configurations based on the load and performance requirements.

This setup provides a comprehensive pipeline for real-time data streaming from MSK to AWS Kinesis and then to WebSocket clients, ensuring low-latency data delivery.
