package com.gehealthcare.mps.streaming.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;

import com.gehealthcare.mps.streaming.controller.data.IRestResponse;
import com.gehealthcare.mps.streaming.service.session.SessionServiceFactory;
import com.gehealthcare.mps.streaming.service.ws.WSRequest;
import com.gehealthcare.mps.streaming.service.ws.WSServiceFactory;

import jakarta.servlet.http.HttpServletResponse;

@Controller
public class WebSocketController {

	private final SimpMessagingTemplate messagingTemplate;

	@Autowired
	private SessionServiceFactory serviceServiceFactory;

	@Autowired
	private WSServiceFactory wsServiceFactory;

	public WebSocketController(SimpMessagingTemplate messagingTemplate) {
		this.messagingTemplate = messagingTemplate;
	}

	/*
	 * @MessageMapping("/send") public ResponseEntity<IRestResponse>
	 * send(@RequestBody WSRequest wsRequest, HttpServletResponse
	 * httpServletResponse) { try { IRestResponse data =
	 * wsServiceFactory.getInstance(wsRequest.getRequestType().toLowerCase())
	 * .process(wsRequest); if (data == null) return new ResponseEntity(null,
	 * HttpStatus.NO_CONTENT);
	 * 
	 * return ResponseEntity.ok(data); } catch (Exception e) { return new
	 * ResponseEntity(e, HttpStatus.INTERNAL_SERVER_ERROR); } }
	 */

	@MessageMapping("/send")
	public void sendMessage(@Payload WSRequest wsRequest) {
		try {
			IRestResponse data = wsServiceFactory.getInstance(wsRequest.getRequestType().toLowerCase())
					.process(wsRequest);

			if (data == null) {
				messagingTemplate.convertAndSend("/topic/messages", "--null--");
			} else {
				messagingTemplate.convertAndSend("/topic/messages", "Static message from send method");
			}
		} catch (Exception e) {
			// return new ResponseEntity(e, HttpStatus.INTERNAL_SERVER_ERROR);
			messagingTemplate.convertAndSend("/topic/messages", "Interal server error: " + e.getMessage());

		}
	}

	@MessageMapping("/subscribe")
	public void subscribe(@Payload WSRequest wsRequest) {
		try {
			IRestResponse data = wsServiceFactory.getInstance(wsRequest.getRequestType().toLowerCase())
					.process(wsRequest);

			if (data == null) {
				messagingTemplate.convertAndSend("/topic/messages", "--null--");
			} else {
				messagingTemplate.convertAndSend("/topic/messages", "Static message from subscribe method");
			}
		} catch (Exception e) {
			// return new ResponseEntity(e, HttpStatus.INTERNAL_SERVER_ERROR);
			messagingTemplate.convertAndSend("/topic/messages", "Interal server error: " + e.getMessage());

		}
	}

	@MessageMapping("/unsubscribe")
	public void unsubscribe(@Payload WSRequest wsRequest) {
		try {
			IRestResponse data = wsServiceFactory.getInstance(wsRequest.getRequestType().toLowerCase())
					.process(wsRequest);

			if (data == null) {
				messagingTemplate.convertAndSend("/topic/messages", "--null--");
			} else {
				messagingTemplate.convertAndSend("/topic/messages", "Static message from unsubscribe method");
			}
		} catch (Exception e) {
			// return new ResponseEntity(e, HttpStatus.INTERNAL_SERVER_ERROR);
			messagingTemplate.convertAndSend("/topic/messages", "Interal server error: " + e.getMessage());

		}
	}
}


package com.gehealthcare.mps.streaming.service.ws;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 * 
 */
@Component
public class WSServiceFactory {

	public WSServiceFactory() {
		super();
		requestTypeMap = new HashMap<>();
		requestTypeMap.put("subscribe", "wsSubscriptionService");
		requestTypeMap.put("send", "wsSendService");
		requestTypeMap.put("unsubscribe", "WsUnsubscriptionService");
	}

	@Autowired
	private Map<String, WSService> typesMap;
	private Map<String, String> requestTypeMap ;

	public WSService getInstance(String type) {
		return typesMap.get(requestTypeMap.get(type));
	}

}
package com.gehealthcare.mps.streaming.service.ws;

import org.springframework.stereotype.Service;

import com.gehealthcare.mps.streaming.controller.data.IRestResponse;
import com.gehealthcare.mps.streaming.controller.data.DataResponse;
import com.gehealthcare.mps.streaming.controller.data.SessionRequest;

/**
 * 
 */
@Service(value = "wsSendService")
public class WSSendService implements WSService {

	@Override
	public IRestResponse process(WSRequest wsRequest) {
		
		SubscriptionResponse subscriptionResponse = new SubscriptionResponse();
		subscriptionResponse.setResult("Static message from send method");
		System.out.println("--SEND--");
		return subscriptionResponse;
	}

}






To modify your HTML and JavaScript code so that clicking the "Connect" button starts a WebSocket connection, generates a UUID, and uses this UUID for subscribe and unsubscribe operations, while ensuring the UUID is invalidated on disconnect, you can integrate the following changes:

```html
<!DOCTYPE html>
<html>
<head>
    <title>STOMP WebSocket Example</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.5.2/sockjs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js"></script>
    <script>
        let stompClient = null;
        let sessionId = null;

        function connect() {
            const socket = new SockJS('/ws');
            stompClient = Stomp.over(socket);
            
            // Generate a UUID for session ID
            sessionId = generateUUID();
            
            stompClient.connect({}, function (frame) {
                console.log('Connected: ' + frame);

                stompClient.subscribe('/topic/messages', function (message) {
                    showMessage(message.body);
                });
            });
        }

        function disconnect() {
            if (stompClient !== null) {
                stompClient.disconnect();
                // Invalidate session ID on disconnect
                sessionId = null;
            }
            console.log("Disconnected");
        }

        function sendMessage() {
            if (!sessionId) {
                console.error("Not connected. Please connect first.");
                return;
            }
            const message = { requestType: "SEND", sessionId: sessionId };
            stompClient.send("/app/send", {}, JSON.stringify(message));
        }

        function subscribeService() {
            if (!sessionId) {
                console.error("Not connected. Please connect first.");
                return;
            }
            const message = { requestType: "SUBSCRIBE", sessionId: sessionId };
            stompClient.send("/app/subscribe", {}, JSON.stringify(message));
        }

        function unsubscribeService() {
            if (!sessionId) {
                console.error("Not connected. Please connect first.");
                return;
            }
            const message = { requestType: "UNSUBSCRIBE", sessionId: sessionId };
            stompClient.send("/app/unsubscribe", {}, JSON.stringify(message));
        }

        function showMessage(message) {
            const response = document.getElementById('response');
            response.innerHTML += "<tr><td>" + message + "</td></tr>";
        }

        function generateUUID() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }
    </script>
</head>
<body>
    <div>
        <button id="connect" onclick="connect()">Connect</button>
        <button id="disconnect" onclick="disconnect()">Disconnect</button>
    </div>
    <div>
        <button id="send" onclick="sendMessage()">Send</button>
    </div>
    <div>
        <button id="subscribe" onclick="subscribeService()">Subscribe</button>
    </div>
    <div>
        <button id="unsubscribe" onclick="unsubscribeService()">Unsubscribe</button>
    </div>
    <table>
        <thead>
            <tr>
                <th>Messages</th>
            </tr>
        </thead>
        <tbody id="response"></tbody>
    </table>
</body>
</html>
```

### Explanation:

1. **Session ID Generation:**
   - When the `connect()` function is invoked, it generates a UUID using the `generateUUID()` function and assigns it to the `sessionId` variable.

2. **WebSocket Connection:**
   - The WebSocket connection is established using the generated `sessionId` as a unique identifier for the session.

3. **Send, Subscribe, and Unsubscribe Operations:**
   - Each operation (`sendMessage()`, `subscribeService()`, `unsubscribeService()`) checks if `sessionId` is valid (not null) before sending the message with the `requestType` and `sessionId` as JSON parameters.

4. **Disconnect Handling:**
   - The `disconnect()` function disconnects the WebSocket connection and invalidates the `sessionId` by setting it to `null`.

5. **Error Handling:**
   - Error messages are logged to the console if operations are attempted without a valid `sessionId`.

This setup ensures that your frontend interacts with the WebSocket server correctly, using a unique session ID for subscribe and unsubscribe operations, and handles connection lifecycle events effectively. Adjust the UUID generation method (`generateUUID()`) based on your specific requirements or use a more secure method for generating session IDs in production environments.
